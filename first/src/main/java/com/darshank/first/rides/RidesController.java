package com.darshank.first.rides;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/rideshareapi/rides") // This means URL's start with /demo (after Application path)
public class RidesController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private RidesRepository ridesRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String email) {

    Rides n = new Rides();
    n.setSource(name);
    n.setDestination(email);
    ridesRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Rides> getAllUsers() {
    // This returns a JSON or XML with the users
    return ridesRepository.findAll();
  }
  
  @PostMapping(path="/getAllForCustomer")
  public @ResponseBody List<Rides> getRidesForAParticularCustomer (@RequestBody final RidesPOJO customername){
	  return ridesRepository.getRidesForParticularCustomer(customername.getCustomername());
  }

  @PostMapping(path="/getAllForDriver")
  public @ResponseBody List<Rides> getRidesForAParticularDriver(@RequestBody final RidesPOJO customername){
	  return ridesRepository.getRidesForParticularDriver(customername.getCustomername());
  }
  
  @PostMapping(path="/getAllRidesForCustomerByDriver")
  public @ResponseBody List<Rides> getAllRidesForCustomerByDriver (@RequestBody final RidesCDPOJO inputRequest){
	  return ridesRepository.getAllRidesForCustomerByDriver(inputRequest.getCustomerName(), inputRequest.getDriverName());
  }

  
  @PostMapping(path="/dashboardDropZipCode")
  public @ResponseBody List<Object> getDashboardDataForCustomerDropZipcode (@RequestBody final RidesPOJO customername){
	  System.out.println(customername.getCustomername());
	  List<Object> result = ridesRepository.getDashboardDataForCustomerDropZipcode(customername.getCustomername());
	  System.out.println(result.get(0));
	  System.out.println(result.size());	  	  
	  return result;
  }    

  @PostMapping(path="/dashboardPickupZipCode")
  public @ResponseBody List<Object> getDashboardDataForCustomerPickupZipCode (@RequestBody final RidesPOJO customername){
	  return ridesRepository.dashboardPickupZipCode(customername.getCustomername());
  }    

  @PostMapping(path="/dashboardRideTypes")
  public @ResponseBody List<Object> getDashboardDataForRydeTypes(@RequestBody final RidesPOJO customername){
	  return ridesRepository.getDashboardDataForRydeTypes(customername.getCustomername());
  }    

  @PostMapping(path="/dashboardBookingsOnDates")
  public @ResponseBody List<Object> getDashboardDataForCustomerBookingsOnDates (@RequestBody final RidesPOJO customername){
	  return ridesRepository.getDashboardDataForCustomerBookingsOnDates(customername.getCustomername());
  }    

  @PostMapping(path="/dashboardCancelledOnDates")
  public @ResponseBody List<Object> getDashboardDataForCustomerCancelledOnDates (@RequestBody final RidesPOJO customername){
	  return ridesRepository.getDashboardDataForCustomerCancelledOnDates(customername.getCustomername());
  }    

  @PostMapping(path="/dashboardRidesWithDrivers")
  public @ResponseBody List<Object> getDashboardDataForCustomerRidesWithDrivers(@RequestBody final RidesPOJO customername){
	  return ridesRepository.getDashboardDataForCustomerRidesWithDrivers(customername.getCustomername());
  }    
  
  @PostMapping(path="/saveRide")
  public @ResponseBody boolean SaveRide (@RequestBody final RideRequestPOJO rideData) {
	  Rides data = new Rides();
	  data.setId(25);
	  data.setCustomer(rideData.getCustomer());
	  data.setDriver(rideData.getDriver());
	  data.setRideType(rideData.getRideType());
	  data.setSource(rideData.getSource());
	  data.setDestination(rideData.getDestination());
//	  data.setBooked_on_date(java.time.LocalTime.now());
//	  data.setBooked_on_time(java.time.LocalDate.now());
	  data.setDistance(rideData.getDistance());
	  data.setPrice(rideData.getPrice());
	  data.setDropzipcode(rideData.getDropzipcode());
	  data.setPickupzipcode(rideData.getPickupzipcode());	  
	  data.setStatus("Booked");
	  ridesRepository.save(data);
	  return true;
  }
}